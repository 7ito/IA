import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Array;
import java.util.ArrayList;

public class Catalog {

    private ArrayList<Item> items;

    public Catalog() {
        items = new ArrayList<>();
    }

    public Catalog(ArrayList<Item> items) {
        this.items = items;
    }

    public void setItems(ArrayList<Item> items) {
        this.items = items;
    }

    public ArrayList<Item> getItems() {
        return items;
    }

    public void addItem(Item item) {
        items.add(item);
    }

    public void editItem(Item target) {
        for (Item item : items) {
            if (item.getName().equals(target.getName())) {
                item.setAmount(item.getAmount() - target.getAmount());
            }
        }
    }

    public void getCatalog() throws Exception {
        try {
            ArrayList<String> names = Database.Main.get(1);
            ArrayList<String> amounts = Database.Main.get(2);
            ArrayList<String> types = Database.Main.get(3);

            for (int i = 0; i < names.size(); i++) {
                Item item = new Item(names.get(i), Integer.parseInt(amounts.get(i)), types.get(i));
                addItem(item);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public String toString() {
        for (Item item : items) {
            System.out.println(item.getName() + ", amount:  " + item.getAmount() + ", type: " + item.getType());
        }
        return "test";
    }

    public Item[] sorted(String type)
    {
        ArrayList<Item> sortList = new ArrayList<>();
        for (Item item : items)
        {
            if (item.getType().equals(type))
            {
                sortList.add(item);
            }
        }

        Item[] sorted = sortList.toArray(new Item[sortList.size()]);
        for (Item item : sorted)
        {
            System.out.println(item.getName() + ", amount: " + item.getAmount() + ", type: " + item.getType());
        }

        return sorted;

    }

    public Item[] searchResult(String query)
    {
        ArrayList<Item> filtered = new ArrayList<>();
        for (Item item : items)
        {
            if (item.getName().toLowerCase().contains(query.toLowerCase())) {
                filtered.add(item);
            }
        }
        Item[] result = filtered.toArray(new Item[filtered.size()]);
        return result;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }
}
